<style>
  #tooltip {
    color: white;
    opacity: .9;
    background: #333;
    padding: 5px;
    border: 1px solid lightgrey;
    border-radius: 5px;
    position: absolute;
    z-index: 10;
    visibility: hidden;
    white-space: nowrap;
    pointer-events: none;
  }
  #circle circle {
    fill: none;
    pointer-events: all;
  }
  path.group {
    fill-opacity: .8;
  }
  path.chord {
    fill-opacity: .8;
    stroke: #000;
    stroke-width: .25px;
  }
  #circle:hover path.fade {
    display: none;
  }
</style>

<h3>Trips per station</h3>
<p>The following chord diagram shows all the trips made by station</p>
<div id="tooltip" style="visibility: hidden; top: 625px; left: 326px;"></div>
<div id="chord"></div>
<hr>
<script>
  //*******************************************************************
  //  CREATE MATRIX AND MAP
  //*******************************************************************
  queue()
    .defer(d3.json, 'chord_data.json')
    .await(function(err, data) {
      if (err) console.log(err);
      drawChords(data.matrix, data.mmap);
    });
  //*******************************************************************
  //  DRAW THE CHORD DIAGRAM
  //*******************************************************************
  function drawChords (matrix, mmap) {
    var w = 1000, h = 900, r1 = h / 2, r0 = r1 - 110;

    var chord = d3.layout.chord()
        .padding(.02)
        .sortSubgroups(d3.descending)
        .sortChords(d3.descending);

    var arc = d3.svg.arc()
        .innerRadius(r0)
        .outerRadius(r0 + 20);

    var svg = d3.select("#chord").append("svg")
        .attr("width", w)
        .attr("height", h)
        .append("svg:g")
        .attr("id", "circle")
        .attr("transform", "translate(" + w / 2 + "," + h / 2 + ")");

        svg.append("circle")
            .attr("r", r0 + 20);

    var rdr = chordRdr(matrix, mmap);
    chord.matrix(matrix);

    var g = svg.selectAll("g.group")
        .data(chord.groups())
        .enter().append("svg:g")
        .attr("class", "group")
        .on("mouseover", mouseover)
        .on("mouseout", function (d) { d3.select("#tooltip").style("visibility", "hidden") });

    g.append("svg:path")
        .style("stroke", "grey")
        .style("fill", function(d) { return rdr(d).gdata; })
        .attr("d", arc);

    g.append("svg:text")
        .each(function(d) { d.angle = (d.startAngle + d.endAngle) / 2; })
        .attr("dy", ".35em")
        .style("font-family", "helvetica, arial, sans-serif")
        .style("font-size", "9px")
        .attr("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })
        .attr("transform", function(d) {
          return "rotate(" + (d.angle * 180 / Math.PI - 90) + ")"
              + "translate(" + (r0 + 26) + ")"
              + (d.angle > Math.PI ? "rotate(180)" : "");
        })
        .text(function(d) { return rdr(d).gname; });

      var chordPaths = svg.selectAll("path.chord")
            .data(chord.chords())
          .enter().append("svg:path")
            .attr("class", "chord")
            .style("stroke", "grey")
            .style("fill", function(d) { return _.where(mmap, {id: d.source.index })[0].data;; })
            .attr("d", d3.svg.chord().radius(r0))
            .on("mouseover", function (d) {
              d3.select("#tooltip")
                .style("visibility", "visible")
                .html(chordTip(rdr(d)))
                .style("top", function () { return (d3.event.pageY - 100)+"px"})
                .style("left", function () { return (d3.event.pageX - 100)+"px";})
            })
            .on("mouseout", function (d) { d3.select("#tooltip").style("visibility", "hidden") });

      function chordTip (d) {
        return d.sname + " → " + d.tname
          + ": " + d.svalue + " trips<br/>"
          + d.tname + " → " + d.sname
          + ": " + d.tvalue + " trips<br/>";
      }

      function groupTip (d) {
        return d.gname + " : " + d.gvalue + " trips<br/>";
        }

      function mouseover(d, i) {
        d3.select("#tooltip")
          .style("visibility", "visible")
          .html(groupTip(rdr(d)))
          .style("top", function () { return (d3.event.pageY - 80)+"px"})
          .style("left", function () { return (d3.event.pageX - 130)+"px";})

        chordPaths.classed("fade", function(p) {
          return p.source.index != i
              && p.target.index != i;
        });
      }
  }
</script>